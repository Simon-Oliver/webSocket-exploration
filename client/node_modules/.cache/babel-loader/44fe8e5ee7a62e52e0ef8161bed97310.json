{"ast":null,"code":"// Higher Order Function\n// Define key and then takes state object and return opposite boolean\nexport const toggleState = key => {\n  return state => {\n    return {\n      [key]: !state[key]\n    };\n  };\n};\nexport const updateObjById = key => {\n  return (id, update) => {\n    return state => {\n      console.log(state[key]); //   const updatedState = state[key].map(e => (e.id === id ? (e = update) : e));\n      //   state[key] = updatedState;\n      //   return { ...state };\n    };\n  };\n};","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/websocket-test/client/src/helper/index.js"],"names":["toggleState","key","state","updateObjById","id","update","console","log"],"mappings":"AAAA;AACA;AACA,OAAO,MAAMA,WAAW,GAAGC,GAAG,IAAI;AAChC,SAAOC,KAAK,IAAI;AACd,WAAO;AAAE,OAACD,GAAD,GAAO,CAACC,KAAK,CAACD,GAAD;AAAf,KAAP;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,MAAME,aAAa,GAAGF,GAAG,IAAI;AAClC,SAAO,CAACG,EAAD,EAAKC,MAAL,KAAgB;AACrB,WAAOH,KAAK,IAAI;AACdI,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACD,GAAD,CAAjB,EADc,CAEd;AACA;AACA;AACD,KALD;AAMD,GAPD;AAQD,CATM","sourcesContent":["// Higher Order Function\n// Define key and then takes state object and return opposite boolean\nexport const toggleState = key => {\n  return state => {\n    return { [key]: !state[key] };\n  };\n};\n\nexport const updateObjById = key => {\n  return (id, update) => {\n    return state => {\n      console.log(state[key]);\n      //   const updatedState = state[key].map(e => (e.id === id ? (e = update) : e));\n      //   state[key] = updatedState;\n      //   return { ...state };\n    };\n  };\n};\n"]},"metadata":{},"sourceType":"module"}