{"ast":null,"code":"import _defineProperty from \"/Users/Simon/Desktop/Coding/websocket-test/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Higher Order Function\n// Define key and then takes state object and return opposite boolean\nexport const toggleState = key => {\n  return state => {\n    return {\n      [key]: !state[key]\n    };\n  };\n};\nexport const updateObjById = key => {\n  return (id, update) => {\n    return state => {\n      const updatedState = state[key].map(e => e.id === id ? e = _objectSpread({}, e, {}, update) : e);\n      state[key] = updatedState;\n      return _objectSpread({}, state);\n    };\n  };\n};","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/websocket-test/client/src/helper/index.js"],"names":["toggleState","key","state","updateObjById","id","update","updatedState","map","e"],"mappings":";;;;;;AAAA;AACA;AACA,OAAO,MAAMA,WAAW,GAAGC,GAAG,IAAI;AAChC,SAAOC,KAAK,IAAI;AACd,WAAO;AAAE,OAACD,GAAD,GAAO,CAACC,KAAK,CAACD,GAAD;AAAf,KAAP;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,MAAME,aAAa,GAAGF,GAAG,IAAI;AAClC,SAAO,CAACG,EAAD,EAAKC,MAAL,KAAgB;AACrB,WAAOH,KAAK,IAAI;AACd,YAAMI,YAAY,GAAGJ,KAAK,CAACD,GAAD,CAAL,CAAWM,GAAX,CAAeC,CAAC,IAAKA,CAAC,CAACJ,EAAF,KAASA,EAAT,GAAeI,CAAC,qBAAQA,CAAR,MAAcH,MAAd,CAAhB,GAA0CG,CAA/D,CAArB;AACAN,MAAAA,KAAK,CAACD,GAAD,CAAL,GAAaK,YAAb;AACA,+BAAYJ,KAAZ;AACD,KAJD;AAKD,GAND;AAOD,CARM","sourcesContent":["// Higher Order Function\n// Define key and then takes state object and return opposite boolean\nexport const toggleState = key => {\n  return state => {\n    return { [key]: !state[key] };\n  };\n};\n\nexport const updateObjById = key => {\n  return (id, update) => {\n    return state => {\n      const updatedState = state[key].map(e => (e.id === id ? (e = { ...e, ...update }) : e));\n      state[key] = updatedState;\n      return { ...state };\n    };\n  };\n};\n"]},"metadata":{},"sourceType":"module"}